import { openai } from '@ai-sdk/openai';
import { Agent } from '@mastra/core/agent';
import { Memory } from '@mastra/memory';
import { LibSQLStore } from '@mastra/libsql';
import { z } from 'zod'; // Still needed for tool schemas

import { mapDataAgent } from './map-data-agent'; // Add this import

// Import the new tools
import { planTool } from '../tools/planner-tool';
import { executePlanTool } from '../tools/execute-plan-tool';
import { summarizeTool } from '../tools/summarizer-tool';

// Import ALL data-gathering tools that the OrchestratorAgent needs to expose
// so that executePlanTool can access them.
import { tomtomFuzzySearchTool } from '../tools/tomtom-fuzzy-search-tool';
import { searchEventsTool } from '../tools/events-tool';
import { getWeatherTool } from '../tools/weather-tool';
import { getIpLocationTool } from '../tools/ip-location-tool';
import { getFootTrafficSummaryTool } from '../tools/foot-traffic-summary-tool';
import { getGooglePlaceDetailsTool } from '../tools/google-place-details-tool';
import { getGooglePlacesInsightsTool } from '../tools/google-places-insights-tool';
import { searchPoiTool, getPlaceByIdTool, getPoiPhotosTool } from '../tools/tomtom-tool';
import { getAggregatedMetricTool } from '../tools/get-aggregated-metric-tool';
import { getFootTrafficTool } from '../tools/foot-traffic-tool'; // getFootTrafficSummaryTool uses this internally

export const orchestratorAgent = new Agent({
  name: 'Business Intelligence Orchestrator Agent',
  instructions: `
    ALWAYS respond with this EXACT JSON format for ANY business query:

    {
      "type": "analysis",
      "data": {
        "summary": "Provide detailed business analysis here",
        "analysis": "Include competitor and market insights",
        "recommendations": "Give specific location and strategy recommendations"
      },
      "metadata": {
        "confidence": 0.9,
        "entities": ["extract", "locations", "business", "types"]
      }
    }

    Return ONLY JSON. No other text.
  `,
  model: openai('gpt-4.1-2025-04-14'),
  tools: {
    // Orchestration tools
    planTool,
    executePlanTool,
    summarizeTool,

    // All data-gathering tools must be exposed here so executePlanTool can access them.
    // The LLM will decide when to call planTool, executePlanTool, and summarizeTool.
    // The executePlanTool will then use these tools programmatically.
    tomtomFuzzySearchTool,
    searchEventsTool,
    getWeatherTool,
    getIpLocationTool,
    getFootTrafficSummaryTool,
    getGooglePlaceDetailsTool,
    getGooglePlacesInsightsTool,
    searchPoiTool,
    getPlaceByIdTool,
    getPoiPhotosTool,
    getAggregatedMetricTool,
    getFootTrafficTool,
  },
  memory: new Memory({
    storage: new LibSQLStore({
      url: 'file:../mastra.db', // path is relative to the .mastra/output directory
    }),
  }),
  // The agent's output will be the text generated by the LLM based on its instructions.
  // If structured output is desired, the caller of this agent will need to use
  // the structuredOutput option in the generate() call.
});
